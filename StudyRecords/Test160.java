/* ======================================================
  ■■■ 컬렉션 프레임워크(Collection Framework) ■■■
=========================================================*/

/*

○ 컬렉션 프레임워크(Collection Framework)
   = 컬렉션(Collection) + ★ 프레임워크(Framework)
     -----------------     -----------------------★★★★★
	       |				환경, 틀, 약속
		   |

		  집합 → 수집품, 소장품, (물건, 사람들의) 무리, 더미, 수집, 수거
                  -------------------------------------------------------
				               모아놓은 것들... 모여있는 것들

   
 ==> 자료 구조

(자료≠정보)
성질에 맞는 그릇에 담고, 꺼내는 과정... => 알고리즘
어떤 그릇을 선택해야 하는지... => 자료구조

○ 자료
   현실 세계로부터 단순한 관찰이나 측정을 통해 수집된 
   사실이나 개념의 값들 또는 그 값들의 집합.

   ↓

○ 자료 구조
   자료 처리를 위한 자료의 표현, 저장, 관계, 관리 및
   이용에 관한 방법 등의 개념을 이해하여 프로그램에 사용하고
   컴퓨터에 의해 처리되는 과정에서 적절한 자료의 표현, 구성, 저장 및
   처리를 위한 알고리즘 작성 및 선택과 이용 방법을 연구하는 분야.

   ↓

○ 컬렉션 프레임워크(Collection Framework)
   컬렉션(모아놓은 데이터들)의 표현과 조작을 위한 통일된 아키텍처로
   컬렉션 프레임워크를 구성하는 요소는 다음과 같다.


   1. 인터페이스(Interface)
      기본적으로 컬렉션에 필요한 『데이터 관리 기능』을 제공한다.
	  예를 들어, List 는 추가, 삭제, 검색 등의 기능을 제공하는
	  컬렉션 인터페이스가 존재하며
	  각 컬렉션마다 고유의 인터페이스가 정의되어 있다.

   2. 구현(Implementation)
      인터페이스를 구현한 클래스로 각 컬렉션을
	  실제 어떤 자료구조를 이용하여 표현했느냐에 따라
	  컬렉션의 종류가 달라지게 된다.
   
   3. 알고리즘(Algorithms)
      각 컬렉션들마다 유용하게 사용될 수 있는 메소드를 의미한다.

※ 자바의 컬렉션은 견고한 컬렉션 프레임워크 위에 정의되어 있으므로
   각 컬렉션 종류마다 제공되는 메소드의 일관성이 있기 때문에
   한 가지 컬렉션을 익혀두면 다른 컬렉션을 사용하는데 용이하다.


	List = 순서가 의미가 있는 목록.
		   → ex) 책 리스트, 출석 명단 등등...

	Set(집합) = 순서가 의미가 없기 때문에, 중복되는 값이 있으면 구분할 수가 없으므로 중복을 허용하지 않는다.
		   → ex) 주머니와 같은 느낌... 여러 개의 공을 주머니에 모두 집어넣는...

	Map =  Key : 이름표, Value : 딸려 나오는 공... 이름표가 있기 때문에 중복이 있더라도 구분이 된다.       


│c │ ← 스택
│b │
│a │
└─┘


◎ 담아둔 그릇(Stack)에 이름표를 붙여주는 것... → 제네릭.(제네릭 표현식)
   ▶ Stack <String> st = new Stack <String>(); → 이름표 : <String>!
	

○ 스택(Stack)
   
   Stack 클래스는 오브젝트 후입선출(LIFO : Last Input First Output) 구조의 Stack을 나타낸다.
   이는 벡터(Vector)를 스택으로 처리하는 5개의 메소드로
   벡터(Vector) 클래스를 확장하게 된다.

   통상의 push() 메소드와 pop() 메소드가 제공되는 것 외에
   스택의 선두 항목으로 peek() 을 실시하는 메소드,
   스택이 비어있는지의 여부를 확인하는 메소드 isEmpty(),
   스택으로 항목을 찾아서 선두로부터 몇 번째인지를 찾아내는 메소드 등이 제공된다.

   스택이 처음으로 작성되었을 때, 항목은 존재하지 않는다.

   - boolean empty() 
     스택이 비어있는지 확인한다.
   - E Object peek() 
     스택의 맨 위의 객체를 스택에서 제거하지 않고 반환한다.
   - E Object pop() 
     스택의 맨 위의객체를 반환하고 스택에서 제거한다.
   - E Object push(E item)
     객체를 스택 자료구조에 저장한다.
   - int search(Object o)
     스택의 맨 위에서부터 파라미터 값으로 넘겨받은 객체까지의 거리를 반환한다.
	 맨 위의 객체의 경우 1을 반환하고 그 아래 객체는 2를 반환하는 형식.
*/

/*
	1. 컬렉션(Collection)
	컬렉션은 데이터의 집합을 의미하며, 
	자바에서는 여러 개의 데이터를 효율적으로 
	다루기 위해 제공되는 자료구조 인터페이스와 
	클래스들을 지칭합니다. 예를 들어 List, Set, Map 
	인터페이스와 이를 구현하는 ArrayList, HashSet, HashMap 
	같은 클래스들이 있습니다.

	주요 기능: 데이터를 추가, 삭제, 검색, 정렬 등 기본적인 데이터 조작 기능을 제공합니다.

	예시: ArrayList, LinkedList, HashSet, TreeMap 등

	사용 목적: 데이터의 집합을 저장하고 다루는 기능에 중점을 둡니다.


	2. 프레임워크(Framework)
	프레임워크는 애플리케이션 개발의 구조와 흐름을 미리 정의해놓은 소프트웨어 환경입니다. 
	자바에서는 컬렉션 프레임워크라고 부를 만큼, 컬렉션을 포함한 여러 기능을 통합하여 사용할 수 있는 
	체계가 제공됩니다. 프레임워크는 규칙과 패턴을 미리 정의해 개발자가 큰 구조를 신경 쓰지 않고 
	필요한 기능을 작성하는 데 집중할 수 있도록 돕습니다.

	주요 기능: 프레임워크는 특정 유형의 애플리케이션을 구축하는 데 필요한 필수 구성 요소들을 제공합니다.
	예를 들어 스프링 프레임워크(Spring Framework)는 웹 애플리케이션을 위한 
	구조와 다양한 서비스를 제공하고, 컬렉션 프레임워크는 데이터 저장과 조작을 위한
	컬렉션 클래스들을 포함하고 있습니다.

	예시: 스프링(Spring), 하이버네이트(Hibernate), 자바의 컬렉션 프레임워크(Collection Framework) 등

	사용 목적: 애플리케이션 구조와 일관된 개발 패턴을 제공하여 개발의 효율성을 높입니다.
	
	요약:
	
	컬렉션 프레임워크: 자바에서 자료구조와 관련된 데이터 조작을 쉽게 할 수 있도록 지원하는 
					   체계화된 라이브러리 집합.
	
	프레임워크: 특정 종류의 애플리케이션 개발을 위한 기본 아키텍처와 규칙을 제공하여 
			    일관성 있게 개발할 수 있도록 돕는 소프트웨어 환경.
*/

// 제네릭, 제네릭 표현식 generic

import java.util.Stack;

public class Test160
{
	public static void main(String[] args)
	{
//		Stack 자료구조 생성
//		Stack<Record> myStack = new Stack<Record>();	
		Stack<Object> myStack = new Stack<Object>();
		
		String str1 = "곽유진";
		String str2 = "정승민";
		String str3 = "엄서연";
		String str4 = "박제훈";
		
//		myStack 이라는 Stack 자료구조 안에 str1~str4 까지 담아내기
//		add(), push();
		myStack.add(str1);	
		myStack.add(str2);
		myStack.push(str3);
		myStack.push(str4);		
		
//		peek() : 스택 맨 위의 객체 반환, 제거하지 않는다.
		String val1 = (String)myStack.peek(); // String ← Object : 다운캐스팅 
		System.out.println("val1 : " + val1);
//		--> val1 : 박제훈

		String val2 = (String)myStack.peek();
		System.out.println("val2 : " + val2);
//		--> val2 : 박제훈	

//		myStack 이라는 이름을 가진 Stack 자료구조에
//		데이터가 비어있는 상태라면... (즉, 채워져 있는 상태라면...)
//		→ !myStack.isEmpty() → !false → true 

//		myStack 자료구조에 값이 들어있으면...
		while(!myStack.isEmpty())
		{
//			pop() : 스택 맨 위의 객체 반환 및 제거한다.
			String value = (String)myStack.pop(); 
			System.out.println("value : " + value);
			
//			value : 박제훈
//			value : 엄서연
//			value : 정승민
//			value : 곽유진

		}
	}
}